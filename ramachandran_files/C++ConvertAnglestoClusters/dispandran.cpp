#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <fstream>
#include <cmath>
#include <map>
using namespace std;

static vector< vector<char>> matrixAnalysis;

void loadMatrix(){
    static bool loaded = false;
    if(!loaded){
        matrixAnalysis.resize(73, vector<char>());
        loaded = true;
        unsigned int i = 0;
        matrixAnalysis[i++] = {'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'B', 'B', 'B', 'B', 'B'};
        matrixAnalysis[i++] = {'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'B', 'B', 'B', 'B'};
        matrixAnalysis[i++] = {'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'B', 'B', 'B'};
        matrixAnalysis[i++] = {'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'B', 'B'};
        matrixAnalysis[i++] = {'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'B', 'B'};
        matrixAnalysis[i++] = {'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', '_', 'B'};
        matrixAnalysis[i++] = {'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'B'};
        matrixAnalysis[i++] = {'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', '_', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'B'};
        matrixAnalysis[i++] = {'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', '_', '_', 'E', 'E', '_', 'B'};
        matrixAnalysis[i++] = {'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', '_', '_', '_', '_', '_', 'E', 'E', 'B'};
        matrixAnalysis[i++] = {'_', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', '_', 'E', 'E', '_', '_', 'E', 'E', 'E', '_', 'E', 'E', '_'};
        matrixAnalysis[i++] = {'_', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'E', 'E', 'E', 'E', 'E', 'E', 'E', '_', '_', 'E', 'E', '_', '_', 'E', 'E', 'E', '_', '_', '_', '_'};
        matrixAnalysis[i++] = {'_', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'E', 'E', 'E', 'E', 'E', 'E', 'E', '_', '_', 'E', 'E', '_', 'E', 'E', '_', '_', '_', '_', '_', '_'};
        matrixAnalysis[i++] = {'_', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'E', 'E', '_', '_', '_', '_', 'E', 'E', 'E', 'E', 'E', 'E', 'E', '_', 'E', 'E', 'E', 'E', '_', '_', '_', '_', '_', '_'};
        matrixAnalysis[i++] = {'_', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', '_', 'E', 'E', 'E', '_', 'E', 'E', '_', '_', '_', '_', '_', '_', '_', '_'};
        matrixAnalysis[i++] = {'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'P', 'P', 'P', 'P', 'P', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'E', 'E', 'E', 'E', 'E', '_', '_', '_', 'E', 'E', 'E', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'B'};
        matrixAnalysis[i++] = {'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'P', 'P', 'P', 'P', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'U', 'U', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'E', 'E', '_', '_', '_', '_', 'E', 'E', 'E', 'E', '_', '_', '_', '_', '_', '_', '_', '_', 'B'};
        matrixAnalysis[i++] = {'_', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'Z', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'P', 'P', 'P', 'P', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'U', 'U', '_', '_', '_', '_', 'd', 'd', '_', '_', '_', 'E', 'E', '_', '_', '_', '_', 'E', 'E', 'E', 'E', '_', '_', '_', '_', '_', '_', '_', '_', '_'};
        matrixAnalysis[i++] = {'_', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'B', 'B', 'B', 'B', 'B', 'B', 'g', 'g', 'g', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '_', 'U', 'U', '_', 'E', 'E', '_', 'U', 'U', '_', '_', '_', '_', '_', 'U', 'U', '_'};
        matrixAnalysis[i++] = {'_', '_', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'B', 'B', 'B', 'g', 'g', 'g', 'g', 'g', 'g', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '_', '_', 'U', 'U', '_', '_', '_', '_', 'U', 'U', '_', '_', '_', '_', '_', 'U', 'U', '_'};
        matrixAnalysis[i++] = {'_', '_', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_'};
        matrixAnalysis[i++] = {'_', '_', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '_', 'd', 'd', '_', 'U', 'U', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_'};
        matrixAnalysis[i++] = {'_', '_', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '_', 'd', 'd', '_', 'U', 'U', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_'};
        matrixAnalysis[i++] = {'_', '_', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '_', 'd', 'd', 'd', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_'};
        matrixAnalysis[i++] = {'_', '_', '_', '_', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '_', 'd', 'd', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_'};
        matrixAnalysis[i++] = {'_', '_', '_', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '_', '_', '_', '_', 'd', 'd', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_'};
        matrixAnalysis[i++] = {'_', '_', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '_', '_', '_', 'd', 'd', '_', 'd', 'd', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_'};
        matrixAnalysis[i++] = {'_', '_', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'Z', 'Z', 'Z', 'Z', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '_', 'd', 'd', 'd', 'd', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_'};
        matrixAnalysis[i++] = {'_', '_', '_', '_', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'g', 'g', 'g', 'g', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '_', 'd', 'd', 'd', 'd', 'd', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_'};
        matrixAnalysis[i++] = {'_', '_', '_', '_', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'g', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_'};
        matrixAnalysis[i++] = {'_', '_', '_', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_'};
        matrixAnalysis[i++] = {'_', '_', '_', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_'};
        matrixAnalysis[i++] = {'_', '_', '_', '_', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '_', '_', 'U', 'U', '_', '_', '_', '_', '_', '_'};
        matrixAnalysis[i++] = {'_', '_', '_', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '_', '_', '_', 'U', 'U', '_', '_', '_', '_', '_', '_'};
        matrixAnalysis[i++] = {'_', '_', 'U', 'U', 'U', 'U', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '_', '_', '_', '_', '_', '_', '_', '_', '_'};
        matrixAnalysis[i++] = {'_', '_', 'U', 'U', '_', '_', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '_', '_', '_', '_', '_', '_', '_', '_', '_'};
        matrixAnalysis[i++] = {'_', '_', '_', '_', '_', '_', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '_', '_', '_', '_', '_', '_', '_', '_'};
        matrixAnalysis[i++] = {'_', '_', '_', '_', '_', '_', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '_', '_', '_', '_', '_', '_', '_', '_'};
        matrixAnalysis[i++] = {'_', '_', '_', '_', '_', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '_', '_', '_', '_', '_', '_', '_'};
        matrixAnalysis[i++] = {'_', '_', '_', '_', '_', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'A', 'A', 'D', 'D', 'D', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '_', '_', '_', '_', '_', '_'};
        matrixAnalysis[i++] = {'_', '_', '_', '_', '_', '_', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'A', 'A', 'A', 'A', 'A', 'A', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '_', '_', '_', '_', '_', '_'};
        matrixAnalysis[i++] = {'_', '_', '_', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'd', 'd', '_', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '_', '_', '_', '_', '_', '_', '_', '_'};
        matrixAnalysis[i++] = {'_', '_', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '_', 'd', 'd', 'd', 'd', 'd', '_', '_', '_', '_', '_'};
        matrixAnalysis[i++] = {'_', '_', 'D', 'D', '_', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'G', 'G', 'G', '_', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', '_', 'd', 'd', 'd', 'd', 'd', '_', '_', '_', '_', '_'};
        matrixAnalysis[i++] = {'_', '_', '_', '_', 'D', 'D', '_', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'G', 'G', 'G', 'G', 'G', 'G', '_', 'd', 'd', 'd', 'd', '_', '_', '_', '_', 'd', 'd', 'd', 'd', '_', '_', '_', '_', '_'};
        matrixAnalysis[i++] = {'_', '_', '_', '_', 'D', 'D', '_', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'D', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'G', 'G', 'G', 'G', 'G', 'G', '_', '_', '_', 'd', 'd', '_', '_', '_', '_', '_', 'd', 'd', '_', '_', '_', '_', '_', '_'};
        matrixAnalysis[i++] = {'_', '_', '_', '_', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'D', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'G', 'G', 'G', 'G', 'G', 'G', '_', '_', '_', 'd', 'd', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_'};
        matrixAnalysis[i++] = {'_', '_', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'D', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'G', 'G', 'G', 'G', 'G', 'G', '_', '_', '_', '_', '_', '_', '_', 'U', 'U', '_', '_', '_', '_', '_', '_', '_', '_', '_'};
        matrixAnalysis[i++] = {'_', '_', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'D', 'D', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'G', 'G', 'G', 'G', 'G', 'G', '_', '_', '_', 'G', 'G', '_', '_', 'U', 'U', 'U', '_', '_', '_', '_', '_', '_', '_', '_'};
        matrixAnalysis[i++] = {'_', '_', '_', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', '_', 'D', 'D', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'G', 'G', 'G', 'G', 'G', 'G', 'G', '_', '_', 'G', 'G', '_', '_', '_', 'U', 'U', '_', '_', '_', '_', '_', '_', '_', '_'};
        matrixAnalysis[i++] = {'_', '_', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', '_', 'D', 'D', 'D', 'D', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'G', 'G', 'G', 'G', 'G', 'G', 'G', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_'};
        matrixAnalysis[i++] = {'_', '_', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', '_', '_', 'D', 'D', 'D', 'D', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'G', 'G', '_', 'G', 'G', 'G', 'G', '_', '_', '_', '_', '_', 'U', 'U', '_', '_', '_', '_', '_', '_', '_', '_', '_'};
        matrixAnalysis[i++] = {'_', '_', '_', '_', 'D', 'D', 'D', '_', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'G', 'G', 'G', 'G', 'G', '_', '_', '_', '_', '_', 'U', 'U', '_', '_', '_', '_', '_', '_', '_', '_', '_'};
        matrixAnalysis[i++] = {'_', '_', '_', '_', 'D', 'D', '_', '_', '_', '_', '_', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'U', 'U', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'G', 'G', 'G', '_', '_', '_', 'G', 'G', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_'};
        matrixAnalysis[i++] = {'_', '_', '_', '_', '_', '_', '_', '_', 'U', 'U', '_', '_', 'D', 'D', 'D', 'D', 'D', 'D', '_', 'D', 'D', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'U', 'U', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'p', 'p', '_', '_', '_', 'G', 'G', 'G', 'G', 'G', 'G', 'G', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_'};
        matrixAnalysis[i++] = {'_', '_', '_', '_', '_', 'U', 'U', '_', 'U', 'U', 'U', 'U', 'U', 'U', 'U', 'U', 'U', 'U', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'p', 'p', '_', 'p', 'p', '_', '_', 'G', 'G', 'G', 'G', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_'};
        matrixAnalysis[i++] = {'_', '_', '_', '_', '_', 'U', 'U', '_', 'U', 'U', 'U', 'U', 'U', 'U', 'U', 'U', 'U', 'U', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'p', 'p', 'p', '_', '_', '_', 'G', 'G', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_'};
        matrixAnalysis[i++] = {'_', '_', '_', '_', '_', '_', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'U', 'U', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', '_', 'G', 'G', '_', '_', '_', '_', '_', 'U', 'U', 'U', 'U', '_', '_', '_', '_', '_', '_'};
        matrixAnalysis[i++] = {'U', 'U', 'U', '_', '_', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'U', 'U', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'p', 'p', '_', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', '_', '_', '_', '_', '_', '_', '_', 'U', 'U', 'U', 'U', '_', '_', '_', '_', 'U', 'U'};
        matrixAnalysis[i++] = {'U', 'U', 'U', '_', '_', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', '_', 'p', 'p', 'p', 'p', 'p', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'U', 'U'};
        matrixAnalysis[i++] = {'_', 'U', 'U', '_', '_', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', '_', '_', 'E', 'E', '_', '_', '_', '_', '_', 'E', 'E', '_', '_', '_', '_'};
        matrixAnalysis[i++] = {'_', '_', '_', '_', '_', '_', '_', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', '_', '_', 'E', 'E', 'E', 'E', 'E', '_', '_', '_', 'E', 'E', 'E', '_', '_', '_'};
        matrixAnalysis[i++] = {'_', '_', '_', '_', '_', '_', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', '_', '_', 'E', 'E', 'E', 'E', 'E', '_', '_', '_', 'E', 'E', 'E', 'E', 'E', '_'};
        matrixAnalysis[i++] = {'E', 'E', 'E', 'E', '_', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'E', 'E', 'E', 'E', 'E', '_', '_', '_', 'E', 'E', 'E', 'E', 'E', 'E', 'E'};
        matrixAnalysis[i++] = {'E', 'E', 'E', 'E', '_', '_', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'E', 'E', 'E', 'E', 'E', 'E', 'E', '_', 'E', 'E', 'E', 'E', 'E', 'E', 'E'};
        matrixAnalysis[i++] = {'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E'};
        matrixAnalysis[i++] = {'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E'};
        matrixAnalysis[i++] = {'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E'};
        matrixAnalysis[i++] = {'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'U', 'U', '_', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E'};
        matrixAnalysis[i++] = {'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'U', 'U', '_', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'B', 'B'};
        matrixAnalysis[i++] = {'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'E', 'E', 'E', 'E', 'E', 'E', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'B', 'B'};
        matrixAnalysis[i++] = {'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'E', 'E', 'E', 'E', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'B', 'B', 'B'};
        matrixAnalysis[i++] = {'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'B', 'B', 'B', 'B', 'B'};
    }
    //cout << "Matrix loaded:"
}

#define PI 3.1415926535
char convertAngle(double phiX, double psiY, bool radians){
    vector<int> numberingPSI;
    for(int i = 180; i >= -180; i = i - 5){
        numberingPSI.push_back(i);
    }
    vector<int> numberingPHI;
    for(int i = -180; i <= +180; i = i + 5){
        numberingPHI.push_back(i);
    }
    double phiXdeg = phiX; //180. * (phiX / PI);
    double psiYdeg = psiY; //180. * (psiY / PI);
    if(radians){
         phiXdeg = 180. * (phiX / PI);
         psiYdeg = 180. * (psiY / PI);
    }

    if(phiXdeg > 180) cerr << "ERR: phiX " << phiX << " out of bounds (" << phiXdeg << ") degrees " << endl;
    if(psiYdeg > 180) cerr << "ERR: psiY " << psiY << " out of bounds (" << psiYdeg << ") degrees " << endl;
    unsigned int classX = static_cast<unsigned int>(73 - ((180. - phiXdeg + 2.5) / 5));
    unsigned int classY = static_cast<unsigned int>(73 - ((180. + psiYdeg + 2.5) / 5));
    if((fabs(phiXdeg - numberingPHI.at(classX)) > 2.5) || (fabs(psiYdeg - numberingPSI.at(classY)) > 2.5)) {
        cerr << "Angle to atrix MISMATCH\n";
        cerr << "Found classes: " << phiXdeg << "," << psiYdeg << " in matrix as positions Line(Y)=" << classY << ", col(X)=" << classX << ", check: Y" << numberingPSI.at(classY) << " X" << numberingPHI.at(classX) << endl;
    }
    return matrixAnalysis.at(classY).at(classX);
}

void parseFile(string fileName, bool radians = true);

void test(){
    ofstream f = ofstream("testClassAngles.txt");
    // Phi (column) first
    f << "-120   95\n"; // this is a B
    f << "-121   95\n"; // this is a B
    f << "-122.49   95\n"; // this is a B
    f << "-122.5   95\n"; // this is a B or Z, whatever
    f << "-122.51   95\n"; // this is a B
    f << "-123   95\n"; // this is a Z
    f << "-124   95\n"; // this is a Z
    f << "-125   95\n"; // this is a Z
    f << "-126   95\n"; // this is a Z
    f << "-127   95\n"; // this is a Z
    f << "-128   95\n"; // this is a B
    f << "-129   95\n"; // this is a B

    f << "-125   92.4\n"; // this is a Z
    f << "-125   92.6\n"; // this is a Z
    f << "-125   95\n"; // this is a Z
    f << "-125   97.4\n"; // this is a Z
    f << "-125   97.6\n"; // this is a B

    f << "-100   150\n"; // this is a B
    f << "-95    150\n";  // this is a P
    f << "-125   95\n"; // this is a Z
    f << "-95    85\n"; // this is a g
    f << "-155   15\n"; // this is a D
    f << "-175   10\n"; // this is a _
    f << "-170   10\n"; // this is a U
    f << "-150   -105\n"; // this is a E
    f << "-100   -165\n"; // this is a P
    f << "-180   -160\n"; // this is a E
    f << "-180   -165\n"; // this is a B
    f << "-145   -80\n"; // this is a _
    f << "35   100\n"; // this is a U
    f << "105  165\n"; // this is a p
    f << "110  165\n"; // this is a E
    f << "175  150\n"; // this is E
    f << "180  150\n"; // this is a B
    f << "105  40\n"; // this is a _
    f << "85   -35\n"; // this is a d
    f << "85   -40\n"; // this is a G
    f << "115  -160\n"; // this is a  p
    f << "120  -160\n"; // this is a E
    f << "165  -175\n"; // this is a E
    f.close();
    parseFile(string("testClassAngles.txt"), false);

    // expected andwer:
//    Read 40 lines (pairs of angles)
//    B	10	0.25
//    D	1	0.025
//    E	6	0.15
//    G	1	0.025
//    P	2	0.05
//    U	2	0.05
//    Z	11	0.275
//    _	3	0.075
//    d	1	0.025
//    g	1	0.025
//    p	2	0.05
}


void generateReferenceValues(){
    vector<char> possible = {'A', 'B', 'D', 'E', 'G', 'P', 'U', 'Z', '_', 'd', 'g', 'p'};
    unsigned long long int nL = possible.size();
    for(unsigned int i = 0; i < nL; ++i){
        string name = string("AnglesFor_") + string(1, possible.at(i));
        if((possible.at(i) >= 'a') && (possible.at(i) <= 'z')){
            name += string("minus");
        }
        name += string(".txt");
        ofstream fout = ofstream(name.c_str());
        for(double vpsi = -180; vpsi <= 180; vpsi = vpsi + 1.){
            for(double vphi = -180; vphi <= 180; vphi = vphi + 1.){
                if(convertAngle(vphi, vpsi, false) == possible.at(i)){
                    fout << vphi << "\t" << vpsi << "\n";
                }
            }
        }
        fout.close();
    }
}

// "C:/Users/pprobert/Desktop/TempWorld/PsiPhisPPIbinders.txt"
int main(int argc, char** argv){
    loadMatrix();
    if(argc != 2) {
        cout << "Script to convert pairs of angles into class of ramachandran angles (letter according to 'Hollingsworth SA, Lewis MC, Berkholz DS, Wong WK, Karplus PA. (φ,ψ)₂ "
                " motifs: a purely conformation-based fine-grained enumeration of protein parts at the two-residue level. J Mol Biol., supplement. Figure S1\n"
                " Usage:    Input: give the text file containing the angles (RADIANS) as argument. Should be only 2 columns, tab separated, col1=Phi (x axis), col2=psi (y axis)\n"
                "           Output (text): fraction of angles in each compartment\n"
                " As an example, the file 'testClassAngles.txt' is generated, and the result s shown here:\n\n";
        test();
        generateReferenceValues();
        return 0;
    }
    parseFile(string(argv[1]));
    return 0;
}

bool isOk(double t){
    if(std::isnan(t)) return false;
    if(t < -0.9e6) return false;
    return true;
}

void parseFile(string fileName, bool radians){
    ifstream f = ifstream(fileName);
    if(!f){
        cerr << "ERR: file " << fileName << " could not be opened " << endl;
        return;
    } else {
        std::map<char,int> score;
        int lineNb = 0;
        while(f.good()){
            // note: the last line, it will enter the loop but read nothing, so make sure angles are reinitialized inside the loop
            double psi = static_cast<double>(NAN); // hope it's still NAN as double, stupid compiler warnings
            double phi = static_cast<double>(NAN);
            f >> phi >> psi;

            //cout << phi << "\t" << psi << "\n";
            if(isOk(phi) && isOk(psi)){
                char classAngle = convertAngle(phi, psi, radians);
                cout << phi << "\t" << psi << "\t";
                if(radians) cout << 180. * (phi / PI) << "\t" << 180. * (psi / PI) << "\t";
                cout << classAngle << endl;
                if(score.find(classAngle) == score.end()){
                    score.insert(std::pair<char, int>(classAngle, 1));
                } else {
                    score[classAngle]++;
                }
                lineNb++;
            }
        }
        cout << endl;
        cout << "Read " << lineNb << " lines (pairs of angles)" << endl;
        std::map<char,int>::iterator it;
        for(it = score.begin(); it != score.end(); ++it){
            cout << it->first << "\t" << it->second << "\t" << static_cast<double>(it->second) / static_cast<double>(lineNb) << "\n";
        }
    }
}


